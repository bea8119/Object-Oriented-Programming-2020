package it.polito.oop.elective;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Collectors;


public class ElectiveManager {
	
	public SortedMap<String, Course> courses= new TreeMap<String, Course>();
	public SortedMap<String, Student> students= new TreeMap<String, Student>();
	private List<Notifier> listeners = new LinkedList<>();
	
    public void addCourse(String name, int availablePositions) {
    
    	if(!courses.containsKey(name))
    		courses.put(name, new Course(name, availablePositions));
        
    }
    
    /**
     * Returns a list of all defined courses
     * @return
     */
    public SortedSet<String> getCourses(){
    	TreeSet<String> cours= courses.keySet().stream().collect(Collectors.toCollection(TreeSet::new));
    	
        return cours;
    }
    
    /**
     * Adds a new student info.
     * 
     * @param id : the id of the student
     * @param gradeAverage : the grade average
     */
    public void loadStudent(String id,  double gradeAverage){
    	
        if(!students.containsKey(id))
        	students.put(id, new Student(id, gradeAverage));
    }

    /**
     * Lists all the students.
     * 
     * @return : list of students ids.
     */
    public Collection<String> getStudents(){
    	
    	
        return students.keySet().stream().collect(Collectors.toList());
    }
    
    /**
     * Lists all the students with grade average in the interval.
     * 
     * @param inf : lower bound of the interval (inclusive)
     * @param sup : upper bound of the interval (inclusive)
     * @return : list of students ids.
     */
    public Collection<String> getStudents(double inf, double sup){
   	
        return students.values().stream().filter(x-> (x.getAvg()>=inf&& x.getAvg()<=sup))
    	 		.map(Student::getId).collect(Collectors.toList());
    }


    /**
     * Adds a new enrollment request of a student for a set of courses.
     * <p>
     * The request accepts a list of course names listed in order of priority.
     * The first in the list is the preferred one, i.e. the student's first choice.
     * 
     * @param id : the id of the student
     * @param selectedCourses : a list of of requested courses, in order of decreasing priority
     * 
     * @return : number of courses the user expressed a preference for
     * 
     * @throws ElectiveException : if the number of selected course is not in [1,3] or the id has not been defined.
     */
    public int requestEnroll(String id, List<String> courses)  throws ElectiveException {
       
    	if(courses.size()<1 || courses.size()>3)
    		throw new ElectiveException();
    	if(!students.containsKey(id))
    		throw new ElectiveException();
    	
    	for(String c: courses) {
    		if(!this.courses.containsKey(c))
    			throw new ElectiveException();    		
    	}
    	Student s= students.get(id);
    	s.setCourses(courses.stream().map(this.courses::get).collect(Collectors.toList()));
    	
    	listeners.forEach(l->l.requestReceived(id));
    	
    	return courses.size();
    }
    
    /**
     * Returns the number of students that selected each course.
     * <p>
     * Since each course can be selected as 1st, 2nd, or 3rd choice,
     * the method reports three numbers corresponding to the
     * number of students that selected the course as i-th choice. 
     * <p>
     * In case of a course with no requests at all
     * the method reports three zeros.
     * <p>
     * 
     * @return the map of list of number of requests per course
     */
    public Map<String,List<Long>> numberRequests(){
    	
    	return
    	courses.keySet().stream().collect(Collectors.toMap(c-> (String) c,
    			c-> (List<Long>) students.values().stream().map(s-> s.choiceNo(c))
    				.collect(Collectors.collectingAndThen(Collectors.groupingBy(n-> n, Collectors.counting()),
    						m->{
    							List<Long> res= new ArrayList<>();
    							for(int i=1; i<=3; ++i) {
                                    res.add( m.getOrDefault(i, 0L) );
                                }
    							return res;
    						}
    						)) ));
    	
       
    }
    
    
    /**
     * Make the definitive class assignments based on the grade averages and preferences.
     * <p>
     * Student with higher grade averages are assigned to first option courses while they fit
     * otherwise they are assigned to second and then third option courses.
     * <p>
     *  
     * @return the number of students that could not be assigned to one of the selected courses.
     */
    public long makeClasses() {
    	
    	
    	
        return -1;
    }
    
    
    /**
     * Returns the students assigned to each course.
     * 
     * @return the map course name vs. student id list.
     */
    public Map<String,List<String>> getAssignments(){
        return null;
    }
    
    
    /**
     * Adds a new notification listener for the announcements
     * issues by this course manager.
     * 
     * @param listener : the new notification listener
     */
    public void addNotifier(Notifier listener) {
        
    }
    
    /**
     * Computes the success rate w.r.t. to first 
     * (second, third) choice.
     * 
     * @param choice : the number of choice to consider.
     * @return the success rate (number between 0.0 and 1.0)
     */
    public double successRate(int choice){
        return -1;
    }

    
    /**
     * Returns the students not assigned to any course.
     * 
     * @return the student id list.
     */
    public List<String> getNotAssigned(){
        return null;
    }
    
    
}
